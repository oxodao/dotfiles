#!/usr/bin/python

import click
from dataclasses import dataclass
import eyed3
from eyed3.id3.frames import ImageFrame
import matplotlib.font_manager
import io
import requests
from typing import Union, Optional
from PIL import Image, ImageDraw, ImageFont

def find_font(name: str):
    found_fonts = {}
    for filename in matplotlib.font_manager.findSystemFonts():
        font = ImageFont.FreeTypeFont(filename)
        fname, fweight = font.getname()
        if fname == name:
            found_fonts[fweight] = filename

    for ordered_weight in ['Regular', 'Bold', 'Italic', 'Bold Italic']:
        if ordered_weight in found_fonts:
            return found_fonts[ordered_weight]

    if len(found_fonts.keys()) > 0:
        return next(iter(found_fonts))

    raise Exception(f'Font not found: {name}')

@dataclass
class BannerGeneratorParameters():
    width: int
    height: int
    margin: int
    font_path: str

    track: str
    artist: str
    art: Image.Image

class BannerGenerator:
    def __init__(self, params: BannerGeneratorParameters):
        self.params = params

    def generate_image(self):
        nh = self.params.height - 2*self.params.margin
        nw = int((self.params.art.size[0] * nh) / self.params.art.size[1])
        art = self.params.art.resize((nw, nh))

        # Making BG
        r = Image.new('RGBA', (self.params.width, self.params.height))
        draw = ImageDraw.Draw(r, 'RGBA')
        draw.rounded_rectangle(((0, 0), (self.params.width, self.params.height)), 20, fill=(0, 0, 0, 230))

        # Making album art
        mask = Image.new('L', art.size, 0)

        mask_draw = ImageDraw.Draw(mask)
        mask_draw.rounded_rectangle(((0, 0), (mask.size[0], mask.size[1])), 30, fill=255)
        r.paste(art, (self.params.margin, self.params.margin), mask)

        # Adding album infos
        ifont = ImageFont.truetype(self.params.font_path, 40)
        draw.text((2*self.params.margin+nw, self.params.margin), self.params.track, font=ifont, fill=(255, 255, 255))

        font_artist = ImageFont.truetype(self.params.font_path, 35)
        draw.text((2*self.params.margin+nw, int(self.params.margin*1.5 + 40)), self.params.artist, font=font_artist, fill=(215, 215, 215))

        return r

class SpotifyClient:
    _http: requests.Session
    _token: Optional[str] = None

    def __init__(self):
        self._http = requests.Session()

    def _login(self):
        pass

    def get_song_info(self):
        pass

@click.command()
@click.option('--artist', help='The artist name')
@click.option('--art', help='The cover image')
@click.option('--font', help='The font name to be used', default="Comic Sans MS")
@click.option('--track', help='The track name')
@click.option('--mp3', help='The sound file')
@click.option('--width', help='The width of the output', type=int, default=720)
@click.option('--height', help='The height of the output', type=int, default=200)
@click.option('--margin', help='The margin of the output', type=int, default=20)
@click.argument('output')
def main(
        track: str,
        artist: str,
        art: Union[str, io.BytesIO],
        mp3: str,
        output: str,
        width: int,
        height: int,
        margin: int,
        font: str,
):
    if (track is None or artist is None) and mp3 is None:
        click.secho('Missing either a id3-filled mp3 or artist/track')
        exit(1)

    font_path = find_font(font)

    if mp3 is not None:
        data = eyed3.load(mp3)
        tags = data.tag

        if artist is None:
            artist = tags.artist

        if track is None:
            track = tags.title

        for x in tags.images:
            if x.picture_type == ImageFrame.FRONT_COVER:
                art = io.BytesIO(x.image_data)
                break

        params = BannerGeneratorParameters(
            width=width,
            height=height,
            margin=margin,
            font_path=font_path,
            track=track or tags.title,
            artist=artist or tags.artist,
            art=Image.open(art),
        )
    else:
        params = BannerGeneratorParameters(
            width=width,
            height=height,
            margin=margin,
            font_path=font_path,
            track=track,
            artist=artist,
            art=Image.open(art),
        )

    generator = BannerGenerator(params)
    generator.generate_image().save(output, 'PNG')

if __name__ == '__main__':
    main()
